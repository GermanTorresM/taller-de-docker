{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Taller de docker Este taller forma parte de las actividades del Aula de Software Libre de la Universidad de C\u00f3rdoba . Info Se recomienda acudir al evento con tu propio port\u00e1til y con una distribuci\u00f3n GNU/Linux compatible con Docker : Ubuntu , Debian , Fedora o CentOS . Si no dispones de ordenador propio notif\u00edcalo a los organizaci\u00f3n en la web de la actividad. Warning Para evitar demoras innecesarias en el inicio de la actividad es necesario traer ya de casa Docker instalado. Para ello lee el cap\u00edtulo de Instalaci\u00f3n .","title":"Inicio"},{"location":"#taller-de-docker","text":"Este taller forma parte de las actividades del Aula de Software Libre de la Universidad de C\u00f3rdoba . Info Se recomienda acudir al evento con tu propio port\u00e1til y con una distribuci\u00f3n GNU/Linux compatible con Docker : Ubuntu , Debian , Fedora o CentOS . Si no dispones de ordenador propio notif\u00edcalo a los organizaci\u00f3n en la web de la actividad. Warning Para evitar demoras innecesarias en el inicio de la actividad es necesario traer ya de casa Docker instalado. Para ello lee el cap\u00edtulo de Instalaci\u00f3n .","title":"Taller de docker"},{"location":"containers/","text":"Contenedores Los contenedores son instancias de las im\u00e1genes que hemos creado o hemos descargado que se ejecutan de forma aislada. Listado La orden para ver el listado de contenedores del sistema es docker ps . Si lo ejecutamos nos dar\u00e1 un listado vac\u00edo porque no hay ning\u00fan contenedor activo. Probemos con el par\u00e1metro all o a . 1 2 3 4 $ docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 4bd76e08b07f wordpress docker-\u2026 11 minutes ago Exited (0) peaceful_murdock 69a3c34c224d hello-world /hello 18 minutes ago Exited (0) blissful_goldwasser Estos contenedores est\u00e1n parados y se pueden volver a ejecutar, con el mismo estado que tuviera el sistema de archivos cuando se detuvieron. Iniciar un contenedor Con docker start podemos iniciar un contenedor parado: 1 2 3 4 5 $ docker start peaceful_murdock peaceful_murdock $ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 4bd76e08b07f wordpress docker\u2026 14 minutes ago Up 0.0.0.0:8080- 80/tcp peaceful_murdock Veremos que la web de instalaci\u00f3n de WordPress est\u00e1 de nuevo disponible. Solo que ahora el contenedor se ejecuta en segundo plano y no lo podemos detener como antes. Detener un contenedor Con docker stop podemos detener un contenedor iniciado, indicando su id o su nombre 1 2 $ docker stop 4bd76e08b07f 4bd76e08b07f Borrar un contenedor Un contenedor detenido ocupa espacio. Si hemos dejado de necesitar un contenedor podemos borrarlo con docker rm . Igualmente hay que indicar id o nombre. 1 2 $ docker rm 4bd76e08b07f 4bd76e08b07f Danger Hay que tener cuidado al borrar contenedores. Cuando un contenedor se borra se elimina cualquier informaci\u00f3n que contenga y no est\u00e9 almacenada en alg\u00fan lugar externo al propio contenedor.","title":"Contenedores"},{"location":"containers/#contenedores","text":"Los contenedores son instancias de las im\u00e1genes que hemos creado o hemos descargado que se ejecutan de forma aislada.","title":"Contenedores"},{"location":"containers/#listado","text":"La orden para ver el listado de contenedores del sistema es docker ps . Si lo ejecutamos nos dar\u00e1 un listado vac\u00edo porque no hay ning\u00fan contenedor activo. Probemos con el par\u00e1metro all o a . 1 2 3 4 $ docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 4bd76e08b07f wordpress docker-\u2026 11 minutes ago Exited (0) peaceful_murdock 69a3c34c224d hello-world /hello 18 minutes ago Exited (0) blissful_goldwasser Estos contenedores est\u00e1n parados y se pueden volver a ejecutar, con el mismo estado que tuviera el sistema de archivos cuando se detuvieron.","title":"Listado"},{"location":"containers/#iniciar-un-contenedor","text":"Con docker start podemos iniciar un contenedor parado: 1 2 3 4 5 $ docker start peaceful_murdock peaceful_murdock $ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 4bd76e08b07f wordpress docker\u2026 14 minutes ago Up 0.0.0.0:8080- 80/tcp peaceful_murdock Veremos que la web de instalaci\u00f3n de WordPress est\u00e1 de nuevo disponible. Solo que ahora el contenedor se ejecuta en segundo plano y no lo podemos detener como antes.","title":"Iniciar un contenedor"},{"location":"containers/#detener-un-contenedor","text":"Con docker stop podemos detener un contenedor iniciado, indicando su id o su nombre 1 2 $ docker stop 4bd76e08b07f 4bd76e08b07f","title":"Detener un contenedor"},{"location":"containers/#borrar-un-contenedor","text":"Un contenedor detenido ocupa espacio. Si hemos dejado de necesitar un contenedor podemos borrarlo con docker rm . Igualmente hay que indicar id o nombre. 1 2 $ docker rm 4bd76e08b07f 4bd76e08b07f Danger Hay que tener cuidado al borrar contenedores. Cuando un contenedor se borra se elimina cualquier informaci\u00f3n que contenga y no est\u00e9 almacenada en alg\u00fan lugar externo al propio contenedor.","title":"Borrar un contenedor"},{"location":"data/","text":"Persistiendo datos Por defecto ya hemos indicado que un contenedor est\u00e1 aislado de todo. Hemos visto como podemos conectar el contenedor a un puerto de red para poder acceder a \u00e9l. Eso incluye al sistema de archivos que contiene. De tal manera que si se elimina el contenedor, se eliminan tambi\u00e9n sus archivos. Si queremos almacenar datos (una web, una base de datos, etc.) dentro de un contenedor necesitamos una manera de almacenarlos sin perderlos. Docker ofrece tres maneras: A trav\u00e9s de vol\u00famenes, que son objetos de Docker como las im\u00e1genes y los contenedores. Montando un directorio de la m\u00e1quina anfitri\u00f3n dentro del contenedor. Almacen\u00e1ndolo en la memoria del sistema (aunque tambi\u00e9n se perder\u00edan al reiniciar el servidor). Lo normal es usar vol\u00famenes, pero habr\u00e1 ocasiones en que es preferible montar directamente un directorio de nuestro espacio de trabajo. Por ejemplo, para guardar los datos de una base de datos usaremos vol\u00famenes, pero para guardar el c\u00f3digo de una aplicaci\u00f3n o de una p\u00e1gina web montaremos el directorio. La raz\u00f3n para esto \u00faltimo es que tanto nuestro entorno de desarrollo como el contenedor tengan acceso a los archivos del c\u00f3digo fuente. Los vol\u00famenes, al contrario que los directorios montados, no deben accederse desde la m\u00e1quina anfitri\u00f3n. Crear un volumen Como necesitamos crear una base de datos para nuestro blog con WordPress vamos a crear un volumen donde guardar la informaci\u00f3n: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 $ docker volume create wordpress-db wordpress-db $ docker volume ls DRIVER VOLUME NAME local wordpress-db $ docker volume inspect wordpress-db [ { CreatedAt : yyyy-mm-ddThh:ii:ss+Z , Driver : local , Labels : {}, Mountpoint : /var/lib/docker/volumes/wordpress-db/_data , Name : wordpress-db , Options : {}, Scope : local } ] En la l\u00ednea 1 creamos el volumen. En la l\u00ednea 4 comprobamos que est\u00e1 creado (pueden aparecer m\u00e1s). En la 8, con la orden inspect, podemos ver los metadatos del volumen y el lugar donde se almacena realmente. Vamos a crear nuestra base de datos usando este volumen. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 $ docker run -d --name wordpress-db \\ --mount source = wordpress-db,target = /var/lib/mysql \\ -e MYSQL_ROOT_PASSWORD = secret \\ -e MYSQL_DATABASE = wordpress \\ -e MYSQL_USER = manager \\ -e MYSQL_PASSWORD = secret mariadb:10.3.9 Unable to find image mariadb:10.3.9 locally 10.3.9: Pulling from library/mariadb 124c757242f8: Pull complete 9d866f8bde2a: Pull complete fa3f2f277e67: Pull complete 398d32b153e8: Pull complete afde35469481: Pull complete 31f2ae82b3e3: Pull complete 3eeaf7e45ea6: Pull complete 716982328e17: Pull complete 34ce605c9036: Pull complete 4502ed9073c0: Pull complete 2afafbdf5a96: Pull complete 43d52b11dd31: Pull complete 30c7b70556f3: Pull complete 8b1b39f2f89a: Pull complete 41480b9319d7: Pull complete Digest: sha256:b7894bd08e5752acdd41fea654cb89467c99e67b8293975bb5d787b27e66ce1a Status: Downloaded newer image for mariadb:10.3.9 30634831d17108aa553a5774e27f398760bdbdf32debc3179843e73aa5957956 $ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 30634831d171 mariadb:10.3.9 docker-entrypoint.s\u2026 20 seconds ago Up 16 seconds 3306/tcp wordpress-db Tip Puedes copiar y pegar el comando desde la siguiente caja para ir m\u00e1s r\u00e1pido 1 2 3 4 5 6 docker run -d --name wordpress-db \\ --mount source=wordpress-db,target=/var/lib/mysql \\ -e MYSQL_ROOT_PASSWORD=secret \\ -e MYSQL_DATABASE=wordpress \\ -e MYSQL_USER=manager \\ -e MYSQL_PASSWORD=secret mariadb:10.3.9 El principal cambio en docker run con respecto a la \u00faltima vez es que no hemos usado -p (el par\u00e1metro para publicar puertos) y hemos a\u00f1adido el par\u00e1metro -d . Lo primero que habremos notado es que el contenedor ya no se queda en primer plano. El par\u00e1metro -d indica que debe ejecutarse como un proceso en segundo plano. As\u00ed no podremos pararlo por accidente con Control+C . Lo segundo es que vemos que el contenedor usa un puerto, el 3306/tcp , pero no est\u00e1 linkado a la m\u00e1quina anfitri\u00f3n. No tenemos forma de acceder a la base de datos directamente. Nuestra intenci\u00f3n es que solo el contenedor de WordPress pueda acceder. Luego una serie de par\u00e1metros -e que nos permite configurar nuestra base de datos. Info Los contenedores se configuran a trav\u00e9s de variables de ambiente, que podemos configurar con el par\u00e1metro -e que vemos en la orden anterior. Gracias a ellos hemos creado una base de datos, un usuario y configurado las contrase\u00f1as. Se recomienda buscar en el registro de Docker la imagen oficial de MariaDB para entender el uso de los par\u00e1metros. Por \u00faltimo, el par\u00e1metro --mount nos permite enlazar el volumen que creamos en el paso anterior con el directorio /var/lib/mysql del contenedor. Ese directorio es donde se guardan los datos de MariaDB . Eso significa que si borramos el contenedor, o actualizamos el contenedor a una nueva versi\u00f3n, no perderemos los datos porque ya no se encuentran en \u00e9l, si no en el volumen. Solo lo perder\u00edamos si borramos expl\u00edcitamente el volumen. Info Cada contendor que usemos tendr\u00e1 uno o varios directorios donde se deben guardar los datos no vol\u00e1tiles. Nos corresponde a nosotros conocer la herramienta y saber de qu\u00e9 directorios se tratan. Usualmente est\u00e1n en la documentaci\u00f3n del contenedor, pero no siempre. Creando nuestro blog Vamos a crear otra vez nuestro contenedor de WordPress , pero esta vez vamos a conectarlo con nuestra base de datos. Adem\u00e1s, queremos poder editar los ficheros de las plantillas, por si tenemos que modificar algo, as\u00ed que necesitaremos montar el directorio del contenedor donde est\u00e1 instalado WordPress con nuestra cuenta de usuario en la m\u00e1quina anfitri\u00f3n. Vamos a crear el espacio de trabajo: 1 mkdir -p ~/Sites/wordpress/target cd ~/Sites/wordpress Y dentro de este directorio arrancamos el contenedor: 1 2 3 4 5 6 7 docker run -d --name wordpress \\ --link wordpress-db:mysql \\ --mount type=bind,source= $(pwd) /target,target=/var/www/html \\ -e WORDPRESS_DB_USER=manager \\ -e WORDPRESS_DB_PASSWORD=secret \\ -p 8080:80 \\ wordpress:4.9.8 Cuando termine la ejecuci\u00f3n, si accedemos a la direcci\u00f3n http://localhost:8080/ , ahora s\u00ed podremos acabar el proceso de instalaci\u00f3n de nuestro WordPress. Si listamos el directorio target comprobaremos que tenemos todos los archivos de instalaci\u00f3n accesibles desde el directorio anfitri\u00f3n.","title":"Persistiendo datos"},{"location":"data/#persistiendo-datos","text":"Por defecto ya hemos indicado que un contenedor est\u00e1 aislado de todo. Hemos visto como podemos conectar el contenedor a un puerto de red para poder acceder a \u00e9l. Eso incluye al sistema de archivos que contiene. De tal manera que si se elimina el contenedor, se eliminan tambi\u00e9n sus archivos. Si queremos almacenar datos (una web, una base de datos, etc.) dentro de un contenedor necesitamos una manera de almacenarlos sin perderlos. Docker ofrece tres maneras: A trav\u00e9s de vol\u00famenes, que son objetos de Docker como las im\u00e1genes y los contenedores. Montando un directorio de la m\u00e1quina anfitri\u00f3n dentro del contenedor. Almacen\u00e1ndolo en la memoria del sistema (aunque tambi\u00e9n se perder\u00edan al reiniciar el servidor). Lo normal es usar vol\u00famenes, pero habr\u00e1 ocasiones en que es preferible montar directamente un directorio de nuestro espacio de trabajo. Por ejemplo, para guardar los datos de una base de datos usaremos vol\u00famenes, pero para guardar el c\u00f3digo de una aplicaci\u00f3n o de una p\u00e1gina web montaremos el directorio. La raz\u00f3n para esto \u00faltimo es que tanto nuestro entorno de desarrollo como el contenedor tengan acceso a los archivos del c\u00f3digo fuente. Los vol\u00famenes, al contrario que los directorios montados, no deben accederse desde la m\u00e1quina anfitri\u00f3n.","title":"Persistiendo datos"},{"location":"data/#crear-un-volumen","text":"Como necesitamos crear una base de datos para nuestro blog con WordPress vamos a crear un volumen donde guardar la informaci\u00f3n: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 $ docker volume create wordpress-db wordpress-db $ docker volume ls DRIVER VOLUME NAME local wordpress-db $ docker volume inspect wordpress-db [ { CreatedAt : yyyy-mm-ddThh:ii:ss+Z , Driver : local , Labels : {}, Mountpoint : /var/lib/docker/volumes/wordpress-db/_data , Name : wordpress-db , Options : {}, Scope : local } ] En la l\u00ednea 1 creamos el volumen. En la l\u00ednea 4 comprobamos que est\u00e1 creado (pueden aparecer m\u00e1s). En la 8, con la orden inspect, podemos ver los metadatos del volumen y el lugar donde se almacena realmente. Vamos a crear nuestra base de datos usando este volumen. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 $ docker run -d --name wordpress-db \\ --mount source = wordpress-db,target = /var/lib/mysql \\ -e MYSQL_ROOT_PASSWORD = secret \\ -e MYSQL_DATABASE = wordpress \\ -e MYSQL_USER = manager \\ -e MYSQL_PASSWORD = secret mariadb:10.3.9 Unable to find image mariadb:10.3.9 locally 10.3.9: Pulling from library/mariadb 124c757242f8: Pull complete 9d866f8bde2a: Pull complete fa3f2f277e67: Pull complete 398d32b153e8: Pull complete afde35469481: Pull complete 31f2ae82b3e3: Pull complete 3eeaf7e45ea6: Pull complete 716982328e17: Pull complete 34ce605c9036: Pull complete 4502ed9073c0: Pull complete 2afafbdf5a96: Pull complete 43d52b11dd31: Pull complete 30c7b70556f3: Pull complete 8b1b39f2f89a: Pull complete 41480b9319d7: Pull complete Digest: sha256:b7894bd08e5752acdd41fea654cb89467c99e67b8293975bb5d787b27e66ce1a Status: Downloaded newer image for mariadb:10.3.9 30634831d17108aa553a5774e27f398760bdbdf32debc3179843e73aa5957956 $ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 30634831d171 mariadb:10.3.9 docker-entrypoint.s\u2026 20 seconds ago Up 16 seconds 3306/tcp wordpress-db Tip Puedes copiar y pegar el comando desde la siguiente caja para ir m\u00e1s r\u00e1pido 1 2 3 4 5 6 docker run -d --name wordpress-db \\ --mount source=wordpress-db,target=/var/lib/mysql \\ -e MYSQL_ROOT_PASSWORD=secret \\ -e MYSQL_DATABASE=wordpress \\ -e MYSQL_USER=manager \\ -e MYSQL_PASSWORD=secret mariadb:10.3.9 El principal cambio en docker run con respecto a la \u00faltima vez es que no hemos usado -p (el par\u00e1metro para publicar puertos) y hemos a\u00f1adido el par\u00e1metro -d . Lo primero que habremos notado es que el contenedor ya no se queda en primer plano. El par\u00e1metro -d indica que debe ejecutarse como un proceso en segundo plano. As\u00ed no podremos pararlo por accidente con Control+C . Lo segundo es que vemos que el contenedor usa un puerto, el 3306/tcp , pero no est\u00e1 linkado a la m\u00e1quina anfitri\u00f3n. No tenemos forma de acceder a la base de datos directamente. Nuestra intenci\u00f3n es que solo el contenedor de WordPress pueda acceder. Luego una serie de par\u00e1metros -e que nos permite configurar nuestra base de datos. Info Los contenedores se configuran a trav\u00e9s de variables de ambiente, que podemos configurar con el par\u00e1metro -e que vemos en la orden anterior. Gracias a ellos hemos creado una base de datos, un usuario y configurado las contrase\u00f1as. Se recomienda buscar en el registro de Docker la imagen oficial de MariaDB para entender el uso de los par\u00e1metros. Por \u00faltimo, el par\u00e1metro --mount nos permite enlazar el volumen que creamos en el paso anterior con el directorio /var/lib/mysql del contenedor. Ese directorio es donde se guardan los datos de MariaDB . Eso significa que si borramos el contenedor, o actualizamos el contenedor a una nueva versi\u00f3n, no perderemos los datos porque ya no se encuentran en \u00e9l, si no en el volumen. Solo lo perder\u00edamos si borramos expl\u00edcitamente el volumen. Info Cada contendor que usemos tendr\u00e1 uno o varios directorios donde se deben guardar los datos no vol\u00e1tiles. Nos corresponde a nosotros conocer la herramienta y saber de qu\u00e9 directorios se tratan. Usualmente est\u00e1n en la documentaci\u00f3n del contenedor, pero no siempre.","title":"Crear un volumen"},{"location":"data/#creando-nuestro-blog","text":"Vamos a crear otra vez nuestro contenedor de WordPress , pero esta vez vamos a conectarlo con nuestra base de datos. Adem\u00e1s, queremos poder editar los ficheros de las plantillas, por si tenemos que modificar algo, as\u00ed que necesitaremos montar el directorio del contenedor donde est\u00e1 instalado WordPress con nuestra cuenta de usuario en la m\u00e1quina anfitri\u00f3n. Vamos a crear el espacio de trabajo: 1 mkdir -p ~/Sites/wordpress/target cd ~/Sites/wordpress Y dentro de este directorio arrancamos el contenedor: 1 2 3 4 5 6 7 docker run -d --name wordpress \\ --link wordpress-db:mysql \\ --mount type=bind,source= $(pwd) /target,target=/var/www/html \\ -e WORDPRESS_DB_USER=manager \\ -e WORDPRESS_DB_PASSWORD=secret \\ -p 8080:80 \\ wordpress:4.9.8 Cuando termine la ejecuci\u00f3n, si accedemos a la direcci\u00f3n http://localhost:8080/ , ahora s\u00ed podremos acabar el proceso de instalaci\u00f3n de nuestro WordPress. Si listamos el directorio target comprobaremos que tenemos todos los archivos de instalaci\u00f3n accesibles desde el directorio anfitri\u00f3n.","title":"Creando nuestro blog"},{"location":"images/","text":"Im\u00e1genes Las im\u00e1genes son la base de Docker. Nuestros contenedores se iniciar\u00e1n a partir de ellas. Como se indic\u00f3 en la introducci\u00f3n, es una plantilla de solo lectura, que se crea incorporando los requisitos necesarios para cumplir el objetivo para el cual fue creada. Por ejemplo, si estamos creando un proyecto con PHP, incorporar\u00e1 el int\u00e9rprete del lenguaje de PHP. Si es una p\u00e1gina web, incorporar\u00e1 el servidor web ( apache , nginx , etc.). Buscar im\u00e1genes Crear una imagen desde cero supone un esfuerzo demasiado grande, as\u00ed que lo normal es partir o usar una ya creada. Para ellos buscaremos en los registros, el lugar donde se almacenan. Hay un registro oficial ( https://hub.docker.com ), pero nada impide a otras organizaciones, o a nosotros mismo, tener un registro propio. Estos registros pueden ser privados o p\u00fablicos. Imaginemos que queremos crear una web con WordPress . Si buscamos en el registro encontraremos una imagen llamada wordpress , con la etiqueta oficial. La recomendaci\u00f3n es que siempre busquemos im\u00e1genes oficiales, est\u00e1n mantenidas y bien documentadas. En la p\u00e1gina encontraremos las diferentes opciones que tiene esta imagen para configurarla, aunque las veremos con m\u00e1s detalle m\u00e1s adelante. Por ahora iniciemos la imagen como se indica: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 $ docker run -p 8080 :80 wordpress Unable to find image wordpress:latest locally latest: Pulling from library/wordpress 802b00ed6f79: Pull complete 59f5a5a895f8: Pull complete 6898b2dbcfeb: Pull complete 8e0903aaa47e: Pull complete 2961af1e196a: Pull complete 71f7016f79a0: Pull complete 5e1a48e5719c: Pull complete 7ae5291984f3: Pull complete 725b65166f31: Pull complete e90b121f9520: Pull complete b5a272809bbd: Pull complete f045f3ae0e2b: Pull complete 7f51c9ea2d8e: Pull complete 5aa9d0ed164a: Pull complete 8eea44e2bfc7: Pull complete 48918885026e: Pull complete 8ac3e8ada01a: Pull complete d3da911b920f: Pull complete 94c7e0af5b20: Pull complete e1f39ac90dec: Pull complete Digest: sha256:7121cdf8e9f01816653a3b2d2f4fc7bfe1dab956f00db5c7e7689e5f1454029a Status: Downloaded newer image for wordpress:latest WordPress not found in /var/www/html - copying now... Complete! WordPress has been successfully copied to /var/www/html AH00558: apache2: Could not reliably determine the server s fully qualified domain name, using 10.17.0.1. Set the ServerName directive globally to suppress this message AH00558: apache2: Could not reliably determine the server s fully qualified domain name, using 10.17.0.1. Set the ServerName directive globally to suppress this message [DDD mmm dd hh:mm:ss.iiiiii yyyy] [mpm_prefork:notice] [pid 1] AH00163: Apache/2.4.25 (Debian) PHP/7.2.10 configured -- resuming normal operations [DDD mmm dd hh:mm:ss.iiiiii yyyy] [core:notice] [pid 1] AH00094: Command line: apache2 -D FOREGROUND Vemos en la l\u00ednea nueva un nuevo par\u00e1metro: -p 8080:80 . Por defecto, un contenedor est\u00e1 totalmente aislado. Pero si estamos montando un blog con WordPress vamos a necesitar acceder a \u00e9l desde el navegador. Con el par\u00e1metro -p , versi\u00f3n corta de --publish , podemos indicar que estamos enlazando un puerto de la m\u00e1quina anfitri\u00f3n con el contenedor. En este caso estamos enlazando el puerto 8080 de la m\u00e1quina anfitri\u00f3n con el 80 del contenedor. Info No vamos a explicar todas las opciones posibles, el tutorial ser\u00eda demasiado largo. Puedes consultar la p\u00e1gina del manual con man docker-run o llamando a la ayuda desde el cliente con docker run --help . En este caso, el formato de publish es: 1 2 3 4 5 6 7 8 -p, --publish ip:[hostPort]:containerPort | [hostPort:]containerPort Publish a container s port, or range of ports, to the host. Both hostPort and containerPort can be specified as a range. When specifying ranges for both, the number of ports in ranges should be equal. Examples: -p 1234-1236:1222-1224, -p 127.0.0.1:$HOSTPORT:$CONTAINERPORT. Use docker port(1) to see the actual mapping, e.g. docker port CONTAINER $CONTAINERPORT. Vamos a abrir la siguiente p\u00e1gina web en nuestro navegador: http://localhost:8080 La cual nos mostrar\u00e1 el asistente de instalaci\u00f3n de WordPress , el cual no vamos a instalar porque necesitamos una base de datos que a\u00fan no tenemos. En su lugar vamos a la consola e interrumpimos la ejecuci\u00f3n del contenedor con Control+C : 1 ^C[DDD mmm dd hh:mm:ss.iiiiii yyyy] [mpm_prefork:notice] [pid 1] AH00169: caught SIGTERM, shutting down Gesti\u00f3n de im\u00e1genes Descarga Las imagenes que nos descargamos se identifican, adem\u00e1s de por el nombre, por una versi\u00f3n. De esa manera podemos tener distintas versiones de una misma imagen. En la p\u00e1gina del registro de WordPress veremos una pesta\u00f1a con el nombre Tags , con las versiones disponibles. Para usar una en concreto se usa dos puntos seguido del nombre de la versi\u00f3n. Si no se indica nada, como hasta ahora, por defecto se descarga la etiquetada como latest . Podemos descargar im\u00e1genes con la orden docker pull : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 $ docker pull wordpress:latest latest: Pulling from library/wordpress Digest: sha256:7121cdf8e9f01816653a3b2d2f4fc7bfe1dab956f00db5c7e7689e5f1454029a Status: Image is up to date for wordpress:latest $ docker pull wordpress:php7.1 php7.1: Pulling from library/wordpress 802b00ed6f79: Already exists 59f5a5a895f8: Already exists 6898b2dbcfeb: Already exists 8e0903aaa47e: Already exists 2961af1e196a: Already exists 71f7016f79a0: Already exists 5e1a48e5719c: Already exists 7ae5291984f3: Already exists 725b65166f31: Already exists a2d738459b49: Pull complete 24830994a3eb: Pull complete b3807dc98c17: Pull complete 59365c2968b5: Pull complete 36bea53859bb: Pull complete a777908b01b4: Pull complete bd3efa4fff20: Pull complete 662f2add84f7: Pull complete 4340a5e4d9f8: Pull complete 2dbeaf456768: Pull complete Digest: sha256:2cc529d3d4ac538f8565d18a893bd1308d6f5522422f4696d87267695f69702c Status: Downloaded newer image for wordpress:php7.1 En el primer caso no hay descarga porque esa versi\u00f3n ya estaba descargada, en la segunda nos descargamos la versi\u00f3n de la imagen que usa php7.1 en vez de php7.2 Listado Para ver el listado de images disponibles usamos docker images : 1 2 3 4 5 $ docker images REPOSITORY TAG IMAGE ID CREATED SIZE wordpress latest ca0fefec932b 7 days ago 409MB wordpress php7.1 37664bd9863e 7 days ago 400MB hello-world latest 4ab4c602aa5e 2 weeks ago 1.84kB Borrado Si queremos dejar de usar alguna imagen usaremos docker rmi : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 $ docker rmi wordpress:php7.1 Untagged: wordpress:php7.1 Untagged: wordpress@sha256:2cc529d3d4ac538f8565d18a893bd1308d6f5522422f4696d87267695f69702c Deleted: sha256:37664bd9863efe67a83cb2ff293f1816a9b5f918668ae19ca36b2af3d3b9f62d Deleted: sha256:77c97f008777c89455c8e5f248a626b192b62cf07ed1993c9acdfab73be210ee Deleted: sha256:14f58345b0bb2efaede03f9424412dce141ea275343305a79952c9c8bda3d1ba Deleted: sha256:5902e2becea5be6d672e8a6a84cc66a2f3b8e1b209302a9995de2b9afac8535f Deleted: sha256:a5b592bce0a767eed15cce29e5e4a941341a0b8de1633ab8836079c03af31b9e Deleted: sha256:6cc2318a4f6975aa87358d9f2852d8b91b335515a1d42ef141af368ee0b6fc05 Deleted: sha256:c3c8b98ead26315e76cd9625fd59f67cab81afa7810b84a229f4e612097a3db4 Deleted: sha256:a641d6d5a4f43b035946f9a82c9f126189e8502567bb17c41d25e922a5b314a3 Deleted: sha256:a7338078acb6f6e8b1a152dabd6e7e47b3e530e1f2e2169b8b69127c9578f8fe Deleted: sha256:8f416a21cdea7d5b42d6b799ab4ade2dffe1f6a3b9d83dd02be47a82699922de Deleted: sha256:53862f425fbc706f70bd1238a0e929bf6d648547481acfad4910c4c1bde39b95 Warning Si una imagen est\u00e1 en uso por alg\u00fan contenedor, no nos dejar\u00e1 eliminarla. 1 2 $ docker rmi hello-world:latest Error response from daemon: conflict: unable to remove repository reference hello-world:latest (must force) - container 5ae8bbb8768d is using its referenced image 4ab4c602aa5e","title":"Im\u00e1genes"},{"location":"images/#imagenes","text":"Las im\u00e1genes son la base de Docker. Nuestros contenedores se iniciar\u00e1n a partir de ellas. Como se indic\u00f3 en la introducci\u00f3n, es una plantilla de solo lectura, que se crea incorporando los requisitos necesarios para cumplir el objetivo para el cual fue creada. Por ejemplo, si estamos creando un proyecto con PHP, incorporar\u00e1 el int\u00e9rprete del lenguaje de PHP. Si es una p\u00e1gina web, incorporar\u00e1 el servidor web ( apache , nginx , etc.).","title":"Im\u00e1genes"},{"location":"images/#buscar-imagenes","text":"Crear una imagen desde cero supone un esfuerzo demasiado grande, as\u00ed que lo normal es partir o usar una ya creada. Para ellos buscaremos en los registros, el lugar donde se almacenan. Hay un registro oficial ( https://hub.docker.com ), pero nada impide a otras organizaciones, o a nosotros mismo, tener un registro propio. Estos registros pueden ser privados o p\u00fablicos. Imaginemos que queremos crear una web con WordPress . Si buscamos en el registro encontraremos una imagen llamada wordpress , con la etiqueta oficial. La recomendaci\u00f3n es que siempre busquemos im\u00e1genes oficiales, est\u00e1n mantenidas y bien documentadas. En la p\u00e1gina encontraremos las diferentes opciones que tiene esta imagen para configurarla, aunque las veremos con m\u00e1s detalle m\u00e1s adelante. Por ahora iniciemos la imagen como se indica: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 $ docker run -p 8080 :80 wordpress Unable to find image wordpress:latest locally latest: Pulling from library/wordpress 802b00ed6f79: Pull complete 59f5a5a895f8: Pull complete 6898b2dbcfeb: Pull complete 8e0903aaa47e: Pull complete 2961af1e196a: Pull complete 71f7016f79a0: Pull complete 5e1a48e5719c: Pull complete 7ae5291984f3: Pull complete 725b65166f31: Pull complete e90b121f9520: Pull complete b5a272809bbd: Pull complete f045f3ae0e2b: Pull complete 7f51c9ea2d8e: Pull complete 5aa9d0ed164a: Pull complete 8eea44e2bfc7: Pull complete 48918885026e: Pull complete 8ac3e8ada01a: Pull complete d3da911b920f: Pull complete 94c7e0af5b20: Pull complete e1f39ac90dec: Pull complete Digest: sha256:7121cdf8e9f01816653a3b2d2f4fc7bfe1dab956f00db5c7e7689e5f1454029a Status: Downloaded newer image for wordpress:latest WordPress not found in /var/www/html - copying now... Complete! WordPress has been successfully copied to /var/www/html AH00558: apache2: Could not reliably determine the server s fully qualified domain name, using 10.17.0.1. Set the ServerName directive globally to suppress this message AH00558: apache2: Could not reliably determine the server s fully qualified domain name, using 10.17.0.1. Set the ServerName directive globally to suppress this message [DDD mmm dd hh:mm:ss.iiiiii yyyy] [mpm_prefork:notice] [pid 1] AH00163: Apache/2.4.25 (Debian) PHP/7.2.10 configured -- resuming normal operations [DDD mmm dd hh:mm:ss.iiiiii yyyy] [core:notice] [pid 1] AH00094: Command line: apache2 -D FOREGROUND Vemos en la l\u00ednea nueva un nuevo par\u00e1metro: -p 8080:80 . Por defecto, un contenedor est\u00e1 totalmente aislado. Pero si estamos montando un blog con WordPress vamos a necesitar acceder a \u00e9l desde el navegador. Con el par\u00e1metro -p , versi\u00f3n corta de --publish , podemos indicar que estamos enlazando un puerto de la m\u00e1quina anfitri\u00f3n con el contenedor. En este caso estamos enlazando el puerto 8080 de la m\u00e1quina anfitri\u00f3n con el 80 del contenedor. Info No vamos a explicar todas las opciones posibles, el tutorial ser\u00eda demasiado largo. Puedes consultar la p\u00e1gina del manual con man docker-run o llamando a la ayuda desde el cliente con docker run --help . En este caso, el formato de publish es: 1 2 3 4 5 6 7 8 -p, --publish ip:[hostPort]:containerPort | [hostPort:]containerPort Publish a container s port, or range of ports, to the host. Both hostPort and containerPort can be specified as a range. When specifying ranges for both, the number of ports in ranges should be equal. Examples: -p 1234-1236:1222-1224, -p 127.0.0.1:$HOSTPORT:$CONTAINERPORT. Use docker port(1) to see the actual mapping, e.g. docker port CONTAINER $CONTAINERPORT. Vamos a abrir la siguiente p\u00e1gina web en nuestro navegador: http://localhost:8080 La cual nos mostrar\u00e1 el asistente de instalaci\u00f3n de WordPress , el cual no vamos a instalar porque necesitamos una base de datos que a\u00fan no tenemos. En su lugar vamos a la consola e interrumpimos la ejecuci\u00f3n del contenedor con Control+C : 1 ^C[DDD mmm dd hh:mm:ss.iiiiii yyyy] [mpm_prefork:notice] [pid 1] AH00169: caught SIGTERM, shutting down","title":"Buscar im\u00e1genes"},{"location":"images/#gestion-de-imagenes","text":"","title":"Gesti\u00f3n de im\u00e1genes"},{"location":"images/#descarga","text":"Las imagenes que nos descargamos se identifican, adem\u00e1s de por el nombre, por una versi\u00f3n. De esa manera podemos tener distintas versiones de una misma imagen. En la p\u00e1gina del registro de WordPress veremos una pesta\u00f1a con el nombre Tags , con las versiones disponibles. Para usar una en concreto se usa dos puntos seguido del nombre de la versi\u00f3n. Si no se indica nada, como hasta ahora, por defecto se descarga la etiquetada como latest . Podemos descargar im\u00e1genes con la orden docker pull : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 $ docker pull wordpress:latest latest: Pulling from library/wordpress Digest: sha256:7121cdf8e9f01816653a3b2d2f4fc7bfe1dab956f00db5c7e7689e5f1454029a Status: Image is up to date for wordpress:latest $ docker pull wordpress:php7.1 php7.1: Pulling from library/wordpress 802b00ed6f79: Already exists 59f5a5a895f8: Already exists 6898b2dbcfeb: Already exists 8e0903aaa47e: Already exists 2961af1e196a: Already exists 71f7016f79a0: Already exists 5e1a48e5719c: Already exists 7ae5291984f3: Already exists 725b65166f31: Already exists a2d738459b49: Pull complete 24830994a3eb: Pull complete b3807dc98c17: Pull complete 59365c2968b5: Pull complete 36bea53859bb: Pull complete a777908b01b4: Pull complete bd3efa4fff20: Pull complete 662f2add84f7: Pull complete 4340a5e4d9f8: Pull complete 2dbeaf456768: Pull complete Digest: sha256:2cc529d3d4ac538f8565d18a893bd1308d6f5522422f4696d87267695f69702c Status: Downloaded newer image for wordpress:php7.1 En el primer caso no hay descarga porque esa versi\u00f3n ya estaba descargada, en la segunda nos descargamos la versi\u00f3n de la imagen que usa php7.1 en vez de php7.2","title":"Descarga"},{"location":"images/#listado","text":"Para ver el listado de images disponibles usamos docker images : 1 2 3 4 5 $ docker images REPOSITORY TAG IMAGE ID CREATED SIZE wordpress latest ca0fefec932b 7 days ago 409MB wordpress php7.1 37664bd9863e 7 days ago 400MB hello-world latest 4ab4c602aa5e 2 weeks ago 1.84kB","title":"Listado"},{"location":"images/#borrado","text":"Si queremos dejar de usar alguna imagen usaremos docker rmi : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 $ docker rmi wordpress:php7.1 Untagged: wordpress:php7.1 Untagged: wordpress@sha256:2cc529d3d4ac538f8565d18a893bd1308d6f5522422f4696d87267695f69702c Deleted: sha256:37664bd9863efe67a83cb2ff293f1816a9b5f918668ae19ca36b2af3d3b9f62d Deleted: sha256:77c97f008777c89455c8e5f248a626b192b62cf07ed1993c9acdfab73be210ee Deleted: sha256:14f58345b0bb2efaede03f9424412dce141ea275343305a79952c9c8bda3d1ba Deleted: sha256:5902e2becea5be6d672e8a6a84cc66a2f3b8e1b209302a9995de2b9afac8535f Deleted: sha256:a5b592bce0a767eed15cce29e5e4a941341a0b8de1633ab8836079c03af31b9e Deleted: sha256:6cc2318a4f6975aa87358d9f2852d8b91b335515a1d42ef141af368ee0b6fc05 Deleted: sha256:c3c8b98ead26315e76cd9625fd59f67cab81afa7810b84a229f4e612097a3db4 Deleted: sha256:a641d6d5a4f43b035946f9a82c9f126189e8502567bb17c41d25e922a5b314a3 Deleted: sha256:a7338078acb6f6e8b1a152dabd6e7e47b3e530e1f2e2169b8b69127c9578f8fe Deleted: sha256:8f416a21cdea7d5b42d6b799ab4ade2dffe1f6a3b9d83dd02be47a82699922de Deleted: sha256:53862f425fbc706f70bd1238a0e929bf6d648547481acfad4910c4c1bde39b95 Warning Si una imagen est\u00e1 en uso por alg\u00fan contenedor, no nos dejar\u00e1 eliminarla. 1 2 $ docker rmi hello-world:latest Error response from daemon: conflict: unable to remove repository reference hello-world:latest (must force) - container 5ae8bbb8768d is using its referenced image 4ab4c602aa5e","title":"Borrado"},{"location":"installation/","text":"Instalaci\u00f3n Existe dos versiones de Docker, una libre y otra que no lo es. Nos ocuparemos exclusivamente de la primera: Docker CE (Community Edition) . Disponibilidad Docker CE est\u00e1 disponible para los siguientes sistemas GNU/Linux: CentOS, Debian, Fedora y Ubuntu. No todas est\u00e1n en m\u00faltiples arquitecturas, pero s\u00ed todas soportan x86_64/amd64 . Si tienes otra arquitectura u otro sistema es mejor que uses una m\u00e1quina virtual para arrancar una distribuci\u00f3n compatible. Para m\u00e1s informaci\u00f3n sobre sistemas privativos soportados, leer la secci\u00f3n de plataformas soportadas de la documentaci\u00f3n oficial. Instalaci\u00f3n Debido a que, dependiendo de la distribuci\u00f3n, la forma de instalarlo difiere, es mejor consultar la documentaci\u00f3n oficial para saber como instalar Docker en tu m\u00e1quina. Ubuntu: https://docs.docker.com/install/linux/docker-ce/ubuntu/ Debian: https://docs.docker.com/install/linux/docker-ce/debian/ CentOS: https://docs.docker.com/install/linux/docker-ce/centos/ Fedora: https://docs.docker.com/install/linux/docker-ce/fedora/ Si quieres instalar y probar Linux por primera vez, te recomendamos que uses una versi\u00f3n LTS de Ubuntu , por ser f\u00e1cil de instalar y tener un ciclo de mantenimiento de seguridad ampliado. Obviamente necesitas tener conexi\u00f3n a Internet para instalar y probar Docker. Para saber si tienes Docker bien instalado, los tutoriales oficiales siempre te indican inicies un contenedor de ejemplo. Esto es lo que sucede: Example Los c\u00f3digos de ejemplo ir\u00e1n acompa\u00f1ados de una caja como esta para poder copiar y pegar los comandos. 1 sudo docker run hello-world El resultado es el siguiente: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 $ sudo docker run hello-world Unable to find image hello-world:latest locally latest: Pulling from library/hello-world d1725b59e92d: Pull complete Digest: sha256:0add3ace90ecb4adbf7777e9aacf18357296e799f81cabc9fde470971e499788 Status: Downloaded newer image for hello-world:latest Hello from Docker! This message shows that your installation appears to be working correctly. To generate this message, Docker took the following steps: 1 . The Docker client contacted the Docker daemon. 2 . The Docker daemon pulled the hello-world image from the Docker Hub. ( amd64 ) 3 . The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4 . The Docker daemon streamed that output to the Docker client, which sent it to your terminal. To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bash Share images, automate workflows, and more with a free Docker ID: https://hub.docker.com/ For more examples and ideas, visit: https://docs.docker.com/get-started/ En la l\u00ednea 1 estamos ejecutando el cliente de Docker, y estamos indicando que queremos ejecutar un contenedor a partir de la imagen hello-world del registro p\u00fablico de Docker. Si es la primera vez que hemos ejecutado esa imagen, nos aparecer\u00e1 la l\u00ednea 2, que indica que la imagen no puede ser encontrada y va a proceder a buscarla, por defecto, en el registro p\u00fablico. Si tenemos conexi\u00f3n a Internet se descargar\u00e1 la imagen (l\u00ednea 6) y autom\u00e1ticamente crear\u00e1 un contenedor. Tanto si se ha descargado la imagen o ya estaba descargada, el contenedor se ejecutar\u00e1, obteniendo el texto de bienvenida que se ve en el cuadro anterior. Configuraci\u00f3n del usuario Si estamos usando Docker en nuestro ordenador personal, podemos configurar nuestro usuario para usar el cliente sin tener que poner sudo delante. Para ello ejecuta lo siguiente: Example A\u00f1ade tu usuario al grupo de docker. 1 sudo usermod -aG docker $USER Para que los nuevos permisos surtan efecto, debes cerrar y volver a abrir la sesi\u00f3n. Para problemas relacionados con los permisos visitad la p\u00e1gina del manual oficial . Requisitos del curso Es necesario traer ya instaladas ciertas im\u00e1genes de contenedores. Ejecuta los siguientes comandos en tu equipo (si te da error de permisos aseg\u00farate que has hecho el apartado anterior y abierto y cerrado la sesi\u00f3n). Example Instalar WordPress : 1 docker pull wordpress:latest Example Instalar MariaDB : 1 docker pull mariadb:latest","title":"Instalaci\u00f3n"},{"location":"installation/#instalacion","text":"Existe dos versiones de Docker, una libre y otra que no lo es. Nos ocuparemos exclusivamente de la primera: Docker CE (Community Edition) .","title":"Instalaci\u00f3n"},{"location":"installation/#disponibilidad","text":"Docker CE est\u00e1 disponible para los siguientes sistemas GNU/Linux: CentOS, Debian, Fedora y Ubuntu. No todas est\u00e1n en m\u00faltiples arquitecturas, pero s\u00ed todas soportan x86_64/amd64 . Si tienes otra arquitectura u otro sistema es mejor que uses una m\u00e1quina virtual para arrancar una distribuci\u00f3n compatible. Para m\u00e1s informaci\u00f3n sobre sistemas privativos soportados, leer la secci\u00f3n de plataformas soportadas de la documentaci\u00f3n oficial.","title":"Disponibilidad"},{"location":"installation/#instalacion_1","text":"Debido a que, dependiendo de la distribuci\u00f3n, la forma de instalarlo difiere, es mejor consultar la documentaci\u00f3n oficial para saber como instalar Docker en tu m\u00e1quina. Ubuntu: https://docs.docker.com/install/linux/docker-ce/ubuntu/ Debian: https://docs.docker.com/install/linux/docker-ce/debian/ CentOS: https://docs.docker.com/install/linux/docker-ce/centos/ Fedora: https://docs.docker.com/install/linux/docker-ce/fedora/ Si quieres instalar y probar Linux por primera vez, te recomendamos que uses una versi\u00f3n LTS de Ubuntu , por ser f\u00e1cil de instalar y tener un ciclo de mantenimiento de seguridad ampliado. Obviamente necesitas tener conexi\u00f3n a Internet para instalar y probar Docker. Para saber si tienes Docker bien instalado, los tutoriales oficiales siempre te indican inicies un contenedor de ejemplo. Esto es lo que sucede: Example Los c\u00f3digos de ejemplo ir\u00e1n acompa\u00f1ados de una caja como esta para poder copiar y pegar los comandos. 1 sudo docker run hello-world El resultado es el siguiente: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 $ sudo docker run hello-world Unable to find image hello-world:latest locally latest: Pulling from library/hello-world d1725b59e92d: Pull complete Digest: sha256:0add3ace90ecb4adbf7777e9aacf18357296e799f81cabc9fde470971e499788 Status: Downloaded newer image for hello-world:latest Hello from Docker! This message shows that your installation appears to be working correctly. To generate this message, Docker took the following steps: 1 . The Docker client contacted the Docker daemon. 2 . The Docker daemon pulled the hello-world image from the Docker Hub. ( amd64 ) 3 . The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4 . The Docker daemon streamed that output to the Docker client, which sent it to your terminal. To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bash Share images, automate workflows, and more with a free Docker ID: https://hub.docker.com/ For more examples and ideas, visit: https://docs.docker.com/get-started/ En la l\u00ednea 1 estamos ejecutando el cliente de Docker, y estamos indicando que queremos ejecutar un contenedor a partir de la imagen hello-world del registro p\u00fablico de Docker. Si es la primera vez que hemos ejecutado esa imagen, nos aparecer\u00e1 la l\u00ednea 2, que indica que la imagen no puede ser encontrada y va a proceder a buscarla, por defecto, en el registro p\u00fablico. Si tenemos conexi\u00f3n a Internet se descargar\u00e1 la imagen (l\u00ednea 6) y autom\u00e1ticamente crear\u00e1 un contenedor. Tanto si se ha descargado la imagen o ya estaba descargada, el contenedor se ejecutar\u00e1, obteniendo el texto de bienvenida que se ve en el cuadro anterior.","title":"Instalaci\u00f3n"},{"location":"installation/#configuracion-del-usuario","text":"Si estamos usando Docker en nuestro ordenador personal, podemos configurar nuestro usuario para usar el cliente sin tener que poner sudo delante. Para ello ejecuta lo siguiente: Example A\u00f1ade tu usuario al grupo de docker. 1 sudo usermod -aG docker $USER Para que los nuevos permisos surtan efecto, debes cerrar y volver a abrir la sesi\u00f3n. Para problemas relacionados con los permisos visitad la p\u00e1gina del manual oficial .","title":"Configuraci\u00f3n del usuario"},{"location":"installation/#requisitos-del-curso","text":"Es necesario traer ya instaladas ciertas im\u00e1genes de contenedores. Ejecuta los siguientes comandos en tu equipo (si te da error de permisos aseg\u00farate que has hecho el apartado anterior y abierto y cerrado la sesi\u00f3n). Example Instalar WordPress : 1 docker pull wordpress:latest Example Instalar MariaDB : 1 docker pull mariadb:latest","title":"Requisitos del curso"},{"location":"introduction/","text":"Introducci\u00f3n Seg\u00fan la Wikipedia: \"Docker es un proyecto de c\u00f3digo abierto que automatiza el despliegue de aplicaciones dentro de contenedores de software, proporcionando una capa adicional de abstracci\u00f3n y automatizaci\u00f3n de virtualizaci\u00f3n de aplicaciones en m\u00faltiples sistemas operativos. Docker utiliza caracter\u00edsticas de aislamiento de recursos del kernel Linux, tales como cgroups y espacios de nombres (namespaces) para permitir que 'contenedores' independientes se ejecuten dentro de una sola instancia de Linux, evitando la sobrecarga de iniciar y mantener m\u00e1quinas virtuales.\" 1 . Esto es una descripci\u00f3n formal, pero para enterarte de qu\u00e9 es docker sigue leyendo: \u00bfA qui\u00e9n le puede interesar usar docker? Docker es \u00fatil a administradores de sistemas, pero tambi\u00e9n a desarrolladores. Uno de los problemas que se presentan durante el desarrollo y despliegue de aplicaciones es encontrarnos con sistemas heterog\u00e9neos, no ya entre los desarrolladores, tambi\u00e9n entre los sistemas de pruebas, pre-producci\u00f3n y producci\u00f3n. Es decir, que los desarrolladores y los sistemas donde se ejecuta la aplicaci\u00f3n tienen librer\u00edas y sistemas operativos diferentes. \u00bfY por qu\u00e9 es un problema? Pues porque la aplicaci\u00f3n puede funcionar bien en una distribuci\u00f3n de GNU/Linux pero no bien en otra, o ejecutarse bien con la versi\u00f3n de un lenguaje pero no con otra. Para asegurar la calidad de desarrollo tenemos que asegurar que todo el mundo usa las mismas versiones de todas las aplicaciones y librer\u00edas necesarios. Esto es m\u00e1s complicado de lo que parece, porque hay desarrolladores que prefieron una distribuci\u00f3n concreta, o incluso sistemas privativos. Incluso los sistemas de pruebas, pre-producci\u00f3n y producci\u00f3n suelen ser distintos. Los sistemas de producci\u00f3n suelen ser m\u00e1s nuevos y potentes y los antiguos se dejan para pruebas y pre-producci\u00f3n. Otro problema es que un mismo desarrollador o un mismo sistema de despliegue tenga que trabajar en m\u00e1s de un proyecto que requiera versiones distintas de librer\u00edas, complic\u00e1ndolo a\u00fan m\u00e1s. Docker viene a solucionar todos estos problemas, tanto para los desarrolladores como para los administradores de sistemas. Con Docker podemos crear entornos aislados con configuraciones que ser\u00e1n exactamente igual siempre. \u00bfDocker es virtualizaci\u00f3n? En GNU/Linux Docker no es virtualizado, no hay un hipervisor. Los procesos que corren dentro de un contenedor de docker se ejecutan con el mismo kernel que la m\u00e1quina anfitri\u00f3n. Linux lo que hace es aislar esos procesos del resto de procesos del sistema, ya sean los propios de la m\u00e1quina anfitri\u00f3n o procesos de otros contenedores. Adem\u00e1s, es capaz de controlar los recursos que se le asignan a esos contenedores (cpu, memoria, red, etc.). Internamente, el contenedor no sabe que lo es y a todos los efectos es una distribuci\u00f3n GNU/Linux independiente, pero sin la penalizaci\u00f3n de rendimiento que tienen los sistemas virtualizados. As\u00ed que, cuando ejecutamos un contenedor, estamos ejecutando un servicio dentro de una distribuci\u00f3n construida a partir de una \"receta\". Esa receta permite que el sistema que se ejecuta sea siempre el mismo, independientemente de si estamos usando Docker en Ubuntu, Fedora o, incluso, sistemas privativos compatibles con Docker. De esa manera podemos garantizar que estamos desarrollando o desplegando nuestra aplicaci\u00f3n, siempre con la misma versi\u00f3n de todas las dependencias. Obviamente, si ejecutamos contenedores GNU/Linux dentro de sistemas privativos, s\u00ed habr\u00e1 virtualizaci\u00f3n. Conceptos b\u00e1sicos Antes de comenzar a instalar y usar docker es importante tener una serie de conceptos claros 2 : Demonio de docker (docker daemon) Es el proceso principal de docker. Escucha peticiones a la API y maneja los objetos de docker: im\u00e1genes, contenedores, redes, vol\u00famenes. Tambi\u00e9n es capaz de comunicarse con otros demonios para controlar servicios docker. Cliente de docker (docker client) Es la principal herramienta que usan los administradores de sistema para interaccionar con el sistema Docker. Registro de docker (docker registry) Es el lugar donde se almacenan las im\u00e1genes de Docker y poder descargarlas para reutilizarlas. Docker Hub es el principal registro p\u00fablico de Docker y contiene ya un mont\u00f3n de im\u00e1genes listas para ser usadas de multitud de servicios (mysql, wordpress, etc). Objetos de docker Cuando usamos Docker, estamos creando y usando im\u00e1genes, contenedores, redes o vol\u00famenes, entre otros. A todo esto se le denominan objetos. Veamos los m\u00e1s importantes: Imagen (image) Plantilla de solo lectura que contiene las instrucciones para crear un contenedor Docker. Pueden estar basadas en otras imagenes, lo cual es habitual. Contenedor (container) Es una instancia ejecutable de una imagen. Esta instancia puede ser creada, iniciada, detenida, movida o eliminada a trav\u00e9s del cliente de Docker o de la API. Las instancias se pueden conectar a una o m\u00e1s redes, sistemas de almacenamiento, o incluso se puede crear una imagen a partir del estado de un contenedor. Se puede controlar c\u00f3mo de aislado est\u00e1 el contenedor del sistema anfitri\u00f3n y del resto de contenedores. El contenedor est\u00e1 definido tanto por la imagen de la que procede como de las opciones de configuraci\u00f3n que permita. Por ejemplo, la imagen oficial de MariaDb permite configurar a trav\u00e9s de opciones la contrase\u00f1a del administrador, de la primera base de datos que se cree, del usuario que la maneja, etc. Servicios (services) Los servicios permiten escalar contenedor a trav\u00e9s de m\u00faltiples demonios de Docker, los cuales trabajar\u00e1n conjuntamente como un enjambre (swarm). Objetivos del taller En este taller aprenderemos: A usar el registro oficial de Docker, a descargar y usar im\u00e1genes del mismo creando contenedores que nos puedan ser \u00fatiles. A crear una imagen a partir de otra. A automatizar la creaci\u00f3n de un conjunto de contenedores que interaccionan entre s\u00ed. En este taller no aprenderemos: A crear un cluster con Docker (Docker Swarm). A administrar sistemas. Se dar\u00e1n ya las instrucciones necesarias para crear servicios pero explicarlos est\u00e1 m\u00e1s alla del \u00e1mbito de este taller. Se recomienda cursar la asignatura: \"Programaci\u00f3n y Administraci\u00f3n de Sistemas\" del Grado de Ingenier\u00eda Inform\u00e1tica. Wikipedia: https://es.wikipedia.org/wiki/Docker_(software) Official Docker Documentation: Docker overview .","title":"Introducci\u00f3n"},{"location":"introduction/#introduccion","text":"Seg\u00fan la Wikipedia: \"Docker es un proyecto de c\u00f3digo abierto que automatiza el despliegue de aplicaciones dentro de contenedores de software, proporcionando una capa adicional de abstracci\u00f3n y automatizaci\u00f3n de virtualizaci\u00f3n de aplicaciones en m\u00faltiples sistemas operativos. Docker utiliza caracter\u00edsticas de aislamiento de recursos del kernel Linux, tales como cgroups y espacios de nombres (namespaces) para permitir que 'contenedores' independientes se ejecuten dentro de una sola instancia de Linux, evitando la sobrecarga de iniciar y mantener m\u00e1quinas virtuales.\" 1 . Esto es una descripci\u00f3n formal, pero para enterarte de qu\u00e9 es docker sigue leyendo:","title":"Introducci\u00f3n"},{"location":"introduction/#a-quien-le-puede-interesar-usar-docker","text":"Docker es \u00fatil a administradores de sistemas, pero tambi\u00e9n a desarrolladores. Uno de los problemas que se presentan durante el desarrollo y despliegue de aplicaciones es encontrarnos con sistemas heterog\u00e9neos, no ya entre los desarrolladores, tambi\u00e9n entre los sistemas de pruebas, pre-producci\u00f3n y producci\u00f3n. Es decir, que los desarrolladores y los sistemas donde se ejecuta la aplicaci\u00f3n tienen librer\u00edas y sistemas operativos diferentes. \u00bfY por qu\u00e9 es un problema? Pues porque la aplicaci\u00f3n puede funcionar bien en una distribuci\u00f3n de GNU/Linux pero no bien en otra, o ejecutarse bien con la versi\u00f3n de un lenguaje pero no con otra. Para asegurar la calidad de desarrollo tenemos que asegurar que todo el mundo usa las mismas versiones de todas las aplicaciones y librer\u00edas necesarios. Esto es m\u00e1s complicado de lo que parece, porque hay desarrolladores que prefieron una distribuci\u00f3n concreta, o incluso sistemas privativos. Incluso los sistemas de pruebas, pre-producci\u00f3n y producci\u00f3n suelen ser distintos. Los sistemas de producci\u00f3n suelen ser m\u00e1s nuevos y potentes y los antiguos se dejan para pruebas y pre-producci\u00f3n. Otro problema es que un mismo desarrollador o un mismo sistema de despliegue tenga que trabajar en m\u00e1s de un proyecto que requiera versiones distintas de librer\u00edas, complic\u00e1ndolo a\u00fan m\u00e1s. Docker viene a solucionar todos estos problemas, tanto para los desarrolladores como para los administradores de sistemas. Con Docker podemos crear entornos aislados con configuraciones que ser\u00e1n exactamente igual siempre.","title":"\u00bfA qui\u00e9n le puede interesar usar docker?"},{"location":"introduction/#docker-es-virtualizacion","text":"En GNU/Linux Docker no es virtualizado, no hay un hipervisor. Los procesos que corren dentro de un contenedor de docker se ejecutan con el mismo kernel que la m\u00e1quina anfitri\u00f3n. Linux lo que hace es aislar esos procesos del resto de procesos del sistema, ya sean los propios de la m\u00e1quina anfitri\u00f3n o procesos de otros contenedores. Adem\u00e1s, es capaz de controlar los recursos que se le asignan a esos contenedores (cpu, memoria, red, etc.). Internamente, el contenedor no sabe que lo es y a todos los efectos es una distribuci\u00f3n GNU/Linux independiente, pero sin la penalizaci\u00f3n de rendimiento que tienen los sistemas virtualizados. As\u00ed que, cuando ejecutamos un contenedor, estamos ejecutando un servicio dentro de una distribuci\u00f3n construida a partir de una \"receta\". Esa receta permite que el sistema que se ejecuta sea siempre el mismo, independientemente de si estamos usando Docker en Ubuntu, Fedora o, incluso, sistemas privativos compatibles con Docker. De esa manera podemos garantizar que estamos desarrollando o desplegando nuestra aplicaci\u00f3n, siempre con la misma versi\u00f3n de todas las dependencias. Obviamente, si ejecutamos contenedores GNU/Linux dentro de sistemas privativos, s\u00ed habr\u00e1 virtualizaci\u00f3n.","title":"\u00bfDocker es virtualizaci\u00f3n?"},{"location":"introduction/#conceptos-basicos","text":"Antes de comenzar a instalar y usar docker es importante tener una serie de conceptos claros 2 : Demonio de docker (docker daemon) Es el proceso principal de docker. Escucha peticiones a la API y maneja los objetos de docker: im\u00e1genes, contenedores, redes, vol\u00famenes. Tambi\u00e9n es capaz de comunicarse con otros demonios para controlar servicios docker. Cliente de docker (docker client) Es la principal herramienta que usan los administradores de sistema para interaccionar con el sistema Docker. Registro de docker (docker registry) Es el lugar donde se almacenan las im\u00e1genes de Docker y poder descargarlas para reutilizarlas. Docker Hub es el principal registro p\u00fablico de Docker y contiene ya un mont\u00f3n de im\u00e1genes listas para ser usadas de multitud de servicios (mysql, wordpress, etc).","title":"Conceptos b\u00e1sicos"},{"location":"introduction/#objetos-de-docker","text":"Cuando usamos Docker, estamos creando y usando im\u00e1genes, contenedores, redes o vol\u00famenes, entre otros. A todo esto se le denominan objetos. Veamos los m\u00e1s importantes: Imagen (image) Plantilla de solo lectura que contiene las instrucciones para crear un contenedor Docker. Pueden estar basadas en otras imagenes, lo cual es habitual. Contenedor (container) Es una instancia ejecutable de una imagen. Esta instancia puede ser creada, iniciada, detenida, movida o eliminada a trav\u00e9s del cliente de Docker o de la API. Las instancias se pueden conectar a una o m\u00e1s redes, sistemas de almacenamiento, o incluso se puede crear una imagen a partir del estado de un contenedor. Se puede controlar c\u00f3mo de aislado est\u00e1 el contenedor del sistema anfitri\u00f3n y del resto de contenedores. El contenedor est\u00e1 definido tanto por la imagen de la que procede como de las opciones de configuraci\u00f3n que permita. Por ejemplo, la imagen oficial de MariaDb permite configurar a trav\u00e9s de opciones la contrase\u00f1a del administrador, de la primera base de datos que se cree, del usuario que la maneja, etc. Servicios (services) Los servicios permiten escalar contenedor a trav\u00e9s de m\u00faltiples demonios de Docker, los cuales trabajar\u00e1n conjuntamente como un enjambre (swarm).","title":"Objetos de docker"},{"location":"introduction/#objetivos-del-taller","text":"En este taller aprenderemos: A usar el registro oficial de Docker, a descargar y usar im\u00e1genes del mismo creando contenedores que nos puedan ser \u00fatiles. A crear una imagen a partir de otra. A automatizar la creaci\u00f3n de un conjunto de contenedores que interaccionan entre s\u00ed. En este taller no aprenderemos: A crear un cluster con Docker (Docker Swarm). A administrar sistemas. Se dar\u00e1n ya las instrucciones necesarias para crear servicios pero explicarlos est\u00e1 m\u00e1s alla del \u00e1mbito de este taller. Se recomienda cursar la asignatura: \"Programaci\u00f3n y Administraci\u00f3n de Sistemas\" del Grado de Ingenier\u00eda Inform\u00e1tica. Wikipedia: https://es.wikipedia.org/wiki/Docker_(software) Official Docker Documentation: Docker overview .","title":"Objetivos del taller"}]}